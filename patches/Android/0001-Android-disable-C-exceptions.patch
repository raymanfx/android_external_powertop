From 604d8f6da54524f0f7bfdd7aea91d353b4f1b612 Mon Sep 17 00:00:00 2001
From: Daniel Leung <daniel.leung@intel.com>
Date: Wed, 25 Feb 2015 13:24:14 -0800
Subject: [PATCH 1/1] Android: disable C++ exceptions

Android native C++ libraries do not support C++
exceptions.

Signed-off-by: Daniel Leung <daniel.leung@intel.com>
---
 Android.mk           |  2 +-
 src/devices/ahci.cpp |  8 ++++++++
 src/devices/alsa.cpp |  8 ++++++++
 src/lib.cpp          | 19 +++++++++++++++++++
 4 files changed, 36 insertions(+), 1 deletion(-)

diff --git a/Android.mk b/Android.mk
index dd98d0f..f6b8689 100644
--- a/Android.mk
+++ b/Android.mk
@@ -14,7 +14,7 @@ LOCAL_MODULE := powertop
 #LOCAL_CPPFLAGS += -Wall -O2 -g -fno-omit-frame-pointer
 
 LOCAL_CFLAGS += -DHAVE_LIBNL20
-LOCAL_CPPFLAGS += -DPACKAGE_VERSION=\"2.7\" -DPACKAGE=powertop -DHAVE_LIBNL20
+LOCAL_CPPFLAGS += -DPACKAGE_VERSION=\"2.7\" -DPACKAGE=powertop -DHAVE_LIBNL20 -DDISABLE_TRYCATCH
 
 LOCAL_C_INCLUDES += external/stlport/stlport/ external/stlport/stlport/stl external/stlport/stlport/using/h/  bionic external/libnl/include/
 
diff --git a/src/devices/ahci.cpp b/src/devices/ahci.cpp
index 72e889f..ddf20b8 100644
--- a/src/devices/ahci.cpp
+++ b/src/devices/ahci.cpp
@@ -161,7 +161,9 @@ void ahci::start_measurement(void)
 	ifstream file;
 
 	sprintf(filename, "%s/ahci_alpm_active", sysfs_path);
+#ifndef DISABLE_TRYCATCH
 	try {
+#endif
 		file.open(filename, ios::in);
 		if (file) {
 			file >> start_active;
@@ -186,10 +188,12 @@ void ahci::start_measurement(void)
 			file >> start_devslp;
 		}
 		file.close();
+#ifndef DISABLE_TRYCATCH
 	}
 	catch (std::ios_base::failure &c) {
 		fprintf(stderr, "%s\n", c.what());
 	}
+#endif
 
 }
 
@@ -201,7 +205,9 @@ void ahci::end_measurement(void)
 	double p;
 	double total;
 
+#ifndef DISABLE_TRYCATCH
 	try {
+#endif
 		sprintf(filename, "%s/ahci_alpm_active", sysfs_path);
 		file.open(filename, ios::in);
 		if (file) {
@@ -226,10 +232,12 @@ void ahci::end_measurement(void)
 			file >> end_devslp;
 		}
 		file.close();
+#ifndef DISABLE_TRYCATCH
 	}
 	catch (std::ios_base::failure &c) {
 		fprintf(stderr, "%s\n", c.what());
 	}
+#endif
 	if (end_active < start_active)
 		end_active = start_active;
 	if (end_partial < start_partial)
diff --git a/src/devices/alsa.cpp b/src/devices/alsa.cpp
index a1fca71..ba3c0b6 100644
--- a/src/devices/alsa.cpp
+++ b/src/devices/alsa.cpp
@@ -87,7 +87,9 @@ void alsa::start_measurement(void)
 	ifstream file;
 
 	sprintf(filename, "%s/power_off_acct", sysfs_path);
+#ifndef DISABLE_TRYCATCH
 	try {
+#endif
 		file.open(filename, ios::in);
 		if (file) {
 			file >> start_inactive;
@@ -100,10 +102,12 @@ void alsa::start_measurement(void)
 			file >> start_active;
 		}
 		file.close();
+#ifndef DISABLE_TRYCATCH
 	}
 	catch (std::ios_base::failure &c) {
 		fprintf(stderr, "%s\n", c.what());
 	}
+#endif
 }
 
 void alsa::end_measurement(void)
@@ -113,7 +117,9 @@ void alsa::end_measurement(void)
 	double p;
 
 	sprintf(filename, "%s/power_off_acct", sysfs_path);
+#ifndef DISABLE_TRYCATCH
 	try {
+#endif
 		file.open(filename, ios::in);
 		if (file) {
 			file >> end_inactive;
@@ -126,10 +132,12 @@ void alsa::end_measurement(void)
 			file >> end_active;
 		}
 		file.close();
+#ifndef DISABLE_TRYCATCH
 	}
 	catch (std::ios_base::failure &c) {
 		fprintf(stderr, "%s\n", c.what());
 	}
+#endif
 
 	p = (end_active - start_active) / (0.001 + end_active + end_inactive - start_active - start_inactive) * 100.0;
 	report_utilization(name, p);
diff --git a/src/lib.cpp b/src/lib.cpp
index 0dec0b7..91dac7a 100644
--- a/src/lib.cpp
+++ b/src/lib.cpp
@@ -176,13 +176,17 @@ void write_sysfs(const string &filename, const string &value)
 	file.open(filename.c_str(), ios::out);
 	if (!file)
 		return;
+#ifndef DISABLE_TRYCATCH
 	try
 	{
+#endif
 		file << value;
 		file.close();
+#ifndef DISABLE_TRYCATCH
 	} catch (std::exception &exc) {
 		return;
 	}
+#endif
 }
 
 int read_sysfs(const string &filename, bool *ok)
@@ -196,16 +200,23 @@ int read_sysfs(const string &filename, bool *ok)
 			*ok = false;
 		return 0;
 	}
+#ifndef DISABLE_TRYCATCH
 	try
 	{
+#else
+		if (ok)
+			*ok = false;
+#endif
 		file >> i;
 		if (ok)
 			*ok = true;
+#ifndef DISABLE_TRYCATCH
 	} catch (std::exception &exc) {
 		if (ok)
 			*ok = false;
 		i = 0;
 	}
+#endif
 	file.close();
 	return i;
 }
@@ -219,17 +230,21 @@ string read_sysfs_string(const string &filename)
 	file.open(filename.c_str(), ios::in);
 	if (!file)
 		return "";
+#ifndef DISABLE_TRYCATCH
 	try
 	{
+#endif
 		file.getline(content, 4096);
 		file.close();
 		c = strchr(content, '\n');
 		if (c)
 			*c = 0;
+#ifndef DISABLE_TRYCATCH
 	} catch (std::exception &exc) {
 		file.close();
 		return "";
 	}
+#endif
 	return content;
 }
 
@@ -246,17 +261,21 @@ string read_sysfs_string(const char *format, const char *param)
 	file.open(filename, ios::in);
 	if (!file)
 		return "";
+#ifndef DISABLE_TRYCATCH
 	try
 	{
+#endif
 		file.getline(content, 4096);
 		file.close();
 		c = strchr(content, '\n');
 		if (c)
 			*c = 0;
+#ifndef DISABLE_TRYCATCH
 	} catch (std::exception &exc) {
 		file.close();
 		return "";
 	}
+#endif
 	return content;
 }
 
-- 
1.8.3.2

